import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Alert,
  Platform,
  PanResponder,
} from 'react-native';
import { Table } from '../types';
import { hallMapStyles } from '../styles/hallMapStyles';

export default function HallMapScreen() {
  const [selectedTable, setSelectedTable] = useState<string | null>(null);
  const [transform, setTransform] = useState({
    scale: 1,
    translateX: 0,
    translateY: 0,
  });

  // –†–µ—Ñ—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–µ—Å—Ç–æ–≤
  const transformRef = useRef(transform);
  const panStartRef = useRef({
    translateX: 0,
    translateY: 0,
    scale: 1,
  });
  const zoomStartRef = useRef({
    distance: 0,
    scale: 1,
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º transformRef –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ transform
  useEffect(() => {
    transformRef.current = transform;
  }, [transform]);

  // –°–æ–∑–¥–∞–µ–º PanResponder –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è Android
  const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => true,
      onMoveShouldSetPanResponder: (evt, gestureState) => {
        // –î–ª—è Android: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–º–µ—Ç–Ω–æ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        const { dx, dy } = gestureState;
        return Math.abs(dx) > 5 || Math.abs(dy) > 5;
      },

      onPanResponderGrant: (evt, gs) => {
        const touches = evt.nativeEvent.touches;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∂–µ—Å—Ç–∞
        panStartRef.current = {
          translateX: transformRef.current.translateX,
          translateY: transformRef.current.translateY,
          scale: transformRef.current.scale,
        };

        // –ï—Å–ª–∏ –¥–≤–∞ –ø–∞–ª—å—Ü–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        if (touches.length === 2) {
          const touch1 = touches[0];
          const touch2 = touches[1];
          const distance = Math.sqrt(
            Math.pow(touch2.pageX - touch1.pageX, 2) +
            Math.pow(touch2.pageY - touch1.pageY, 2)
          );

          zoomStartRef.current = {
            distance: distance,
            scale: transformRef.current.scale,
          };
        }
      },

      onPanResponderMove: (evt, gs) => {
        const touches = evt.nativeEvent.touches;

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º –ø–∞–ª—å—Ü–µ–º
        if (touches.length === 1) {
          const sensitivity = Platform.OS === 'android' ? 1.2 : 0.8;
          const newTranslateX = panStartRef.current.translateX + (gs.dx / panStartRef.current.scale) * sensitivity;
          const newTranslateY = panStartRef.current.translateY + (gs.dy / panStartRef.current.scale) * sensitivity;

          setTransform(prev => ({
            ...prev,
            translateX: newTranslateX,
            translateY: newTranslateY
          }));
        }
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É–º—è –ø–∞–ª—å—Ü–∞–º–∏
        else if (touches.length === 2) {
          const touch1 = touches[0];
          const touch2 = touches[1];
          const currentDistance = Math.sqrt(
            Math.pow(touch2.pageX - touch1.pageX, 2) +
            Math.pow(touch2.pageY - touch1.pageY, 2)
          );

          // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
          if (zoomStartRef.current.distance > 0) {
            const scaleChange = currentDistance / zoomStartRef.current.distance;
            const newScale = Math.max(0.3, Math.min(3, zoomStartRef.current.scale * scaleChange));

            setTransform(prev => ({
              ...prev,
              scale: newScale
            }));
          }
        }
      },

      onPanResponderRelease: () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        zoomStartRef.current.distance = 0;
      },

      // –î–ª—è Android: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤
      onPanResponderTerminationRequest: () => false,
    })
  ).current;

  // –î–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ (20 —Å—Ç–æ–ª–æ–≤)
  const tables: Table[] = [
    { id: '1', number: 1, isAvailable: true, position: { x: 50, y: 50 } },
    { id: '2', number: 2, isAvailable: true, position: { x: 150, y: 50 } },
    { id: '3', number: 3, isAvailable: false, position: { x: 250, y: 50 } },
    { id: '4', number: 4, isAvailable: true, position: { x: 350, y: 50 } },
    { id: '5', number: 5, isAvailable: true, position: { x: 450, y: 50 } },
    { id: '6', number: 6, isAvailable: true, position: { x: 50, y: 150 } },
    { id: '7', number: 7, isAvailable: false, position: { x: 150, y: 150 } },
    { id: '8', number: 8, isAvailable: true, position: { x: 250, y: 150 } },
    { id: '9', number: 9, isAvailable: true, position: { x: 350, y: 150 } },
    { id: '10', number: 10, isAvailable: true, position: { x: 450, y: 150 } },
    { id: '11', number: 11, isAvailable: true, position: { x: 50, y: 250 } },
    { id: '12', number: 12, isAvailable: false, position: { x: 150, y: 250 } },
    { id: '13', number: 13, isAvailable: true, position: { x: 250, y: 250 } },
    { id: '14', number: 14, isAvailable: true, position: { x: 350, y: 250 } },
    { id: '15', number: 15, isAvailable: true, position: { x: 450, y: 250 } },
    { id: '16', number: 16, isAvailable: true, position: { x: 50, y: 350 } },
    { id: '17', number: 17, isAvailable: false, position: { x: 150, y: 350 } },
    { id: '18', number: 18, isAvailable: true, position: { x: 250, y: 350 } },
    { id: '19', number: 19, isAvailable: true, position: { x: 350, y: 350 } },
    { id: '20', number: 20, isAvailable: true, position: { x: 450, y: 350 } },
  ];

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –¥–ª—è Android
  const handleTableSelect = (table: Table) => {
    if (!table.isAvailable) {
      Alert.alert('–°—Ç–æ–ª –∑–∞–Ω—è—Ç', `–°—Ç–æ–ª ‚Ññ${table.number} –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç`);
      return;
    }

    // –î–ª—è Android: –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (Platform.OS === 'android') {
      setTimeout(() => {
        setSelectedTable(table.id);
        Alert.alert(
          '–°—Ç–æ–ª –≤—ã–±—Ä–∞–Ω',
          `–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª ‚Ññ${table.number}`
        );
      }, 50);
    } else {
      setSelectedTable(table.id);
      Alert.alert(
        '–°—Ç–æ–ª –≤—ã–±—Ä–∞–Ω',
        `–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª ‚Ññ${table.number}`
      );
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
  const handleZoomIn = () => {
    setTransform(prev => ({
      ...prev,
      scale: Math.min(prev.scale + 0.2, 3)
    }));
  };

  const handleZoomOut = () => {
    setTransform(prev => ({
      ...prev,
      scale: Math.max(prev.scale - 0.2, 0.3)
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã
  const handleResetMap = () => {
    setTransform({
      scale: 1,
      translateX: 0,
      translateY: 0,
    });
  };

  // –†–µ–Ω–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –Ω–∞ –∫–∞—Ä—Ç–µ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è Android
  const renderTable = (table: Table) => (
    <TouchableOpacity
      key={table.id}
      style={[
        hallMapStyles.table,
        !table.isAvailable && hallMapStyles.tableOccupied,
        selectedTable === table.id && hallMapStyles.tableSelected,
        Platform.OS === 'android' && hallMapStyles.tableAndroid,
        {
          left: table.position.x,
          top: table.position.y,
        }
      ]}
      onPress={() => handleTableSelect(table)}
      disabled={!table.isAvailable}
      activeOpacity={0.7}
      delayPressIn={0}
    >
      <Text style={[
        hallMapStyles.tableNumber,
        Platform.OS === 'android' && hallMapStyles.tableNumberAndroid
      ]}>
        {table.number}
      </Text>
    </TouchableOpacity>
  );

  return (
    <View style={hallMapStyles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <View style={hallMapStyles.header}>
        <Text style={hallMapStyles.headerTitle}>üó∫Ô∏è –°—Ö–µ–º–∞ –∑–∞–ª–∞</Text>
      </View>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–µ–ø–µ—Ä—å –∫–∞—Ä—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ */}
      <View style={hallMapStyles.content}>
        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã —Å –∂–µ—Å—Ç–∞–º–∏ */}
        <View
          style={[
            hallMapStyles.mapContainer,
            Platform.OS === 'android' && hallMapStyles.mapContainerAndroid
          ]}
          {...panResponder.panHandlers}
        >
          <View
            style={[
              hallMapStyles.simpleMap,
              {
                transform: [
                  { translateX: transform.translateX },
                  { translateY: transform.translateY },
                  { scale: transform.scale }
                ]
              }
            ]}
          >
            {/* –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–æ–ª–æ–≤ */}
            {tables.map(renderTable)}
          </View>

          {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç—ã */}
          <View style={hallMapStyles.controlsOverlay}>
            <View style={hallMapStyles.zoomControlsOverlay}>
              <TouchableOpacity
                style={hallMapStyles.zoomButtonOverlay}
                onPress={handleZoomIn}
                activeOpacity={0.7}
              >
                <Text style={hallMapStyles.zoomButtonText}>+</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={hallMapStyles.zoomButtonOverlay}
                onPress={handleZoomOut}
                activeOpacity={0.7}
              >
                <Text style={hallMapStyles.zoomButtonText}>-</Text>
              </TouchableOpacity>
            </View>

            <TouchableOpacity
              style={hallMapStyles.resetButtonOverlay}
              onPress={handleResetMap}
              activeOpacity={0.7}
            >
              <Text style={hallMapStyles.resetButtonText}>‚ü≤ –°–±—Ä–æ—Å</Text>
            </TouchableOpacity>
          </View>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—à—Ç–∞–±–µ –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç—ã */}
          <View style={hallMapStyles.scaleInfoOverlay}>
            <Text style={hallMapStyles.scaleText}>–ú–∞—Å—à—Ç–∞–±: {Math.round(transform.scale * 100)}%</Text>
          </View>
        </View>

        {/* –õ–µ–≥–µ–Ω–¥–∞ –ø–æ–¥ –∫–∞—Ä—Ç–æ–π */}
        <View style={hallMapStyles.legend}>
          <View style={hallMapStyles.legendItem}>
            <View style={[hallMapStyles.legendColor, hallMapStyles.available]} />
            <Text style={hallMapStyles.legendText}>–°–≤–æ–±–æ–¥–µ–Ω</Text>
          </View>
          <View style={hallMapStyles.legendItem}>
            <View style={[hallMapStyles.legendColor, hallMapStyles.occupied]} />
            <Text style={hallMapStyles.legendText}>–ó–∞–Ω—è—Ç</Text>
          </View>
          <View style={hallMapStyles.legendItem}>
            <View style={[hallMapStyles.legendColor, hallMapStyles.selected]} />
            <Text style={hallMapStyles.legendText}>–í—ã–±—Ä–∞–Ω</Text>
          </View>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–µ */}
        {selectedTable && (
          <View style={hallMapStyles.selectedTableInfo}>
            <Text style={hallMapStyles.selectedTableText}>
              –í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª: ‚Ññ{tables.find(t => t.id === selectedTable)?.number}
            </Text>
            <TouchableOpacity
              style={hallMapStyles.clearSelectionButton}
              onPress={() => setSelectedTable(null)}
              activeOpacity={0.7}
            >
              <Text style={hallMapStyles.clearSelectionText}>‚úï</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    </View>
  );
}