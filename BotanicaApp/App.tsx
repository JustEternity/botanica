import React, { useState, useRef, useCallback, useEffect } from 'react';
import { NavigationContainer as NavContainer } from '@react-navigation/native';
import { createBottomTabNavigator as createTabNavigator } from '@react-navigation/bottom-tabs';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Image,
  ScrollView,
  LayoutAnimation,
  Platform,
  UIManager,
  NativeSyntheticEvent,
  NativeScrollEvent,
  Alert,
  PanResponder
} from 'react-native';

// –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è Android
if (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {
  UIManager.setLayoutAnimationEnabledExperimental(true);
}

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const NavigationContainer = NavContainer;
const createBottomTabNavigator = createTabNavigator;

// –¢–∏–ø—ã –¥–ª—è –∫–∞—Ä—Ç—ã —Å—Ç–æ–ª–æ–≤
type Table = {
  id: string;
  number: number;
  isAvailable: boolean;
  position: { x: number; y: number };
};

// –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–Ω—é
const MENU_DATA = [
  {
    id: '1',
    title: '–ö–∞–ª—å—è–Ω—ã',
    data: [
      {
        id: '1',
        name: '–ö–∞–ª—å—è–Ω —è–±–ª–æ—á–Ω—ã–π',
        price: 1200,
        description: '–°–≤–µ–∂–∏–π —Ç–∞–±–∞–∫ –Ω–∞ —è–±–ª–æ–∫–µ',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=üçé'
      },
      {
        id: '2',
        name: '–ö–∞–ª—å—è–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
        price: 1000,
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å—è–Ω —Å –º–æ–ª–æ–∫–æ–º',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=üí®'
      },
      {
        id: '3',
        name: '–ö–∞–ª—å—è–Ω –ø—Ä–µ–º–∏—É–º',
        price: 1500,
        description: '–ü—Ä–µ–º–∏—É–º —Ç–∞–±–∞–∫ –∏ —É–≥–ª–∏',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=‚≠ê'
      }
    ]
  },
  {
    id: '2',
    title: '–ù–∞–ø–∏—Ç–∫–∏',
    data: [
      {
        id: '4',
        name: '–ß–∞–π –∑–µ–ª–µ–Ω—ã–π',
        price: 300,
        description: '–°–≤–µ–∂–µ–∑–∞–≤–∞—Ä–µ–Ω–Ω—ã–π —á–∞–π',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=üçµ'
      },
      {
        id: '5',
        name: '–ö–æ—Ñ–µ –ª–∞—Ç—Ç–µ',
        price: 350,
        description: '–ê—Ä–æ–º–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=‚òï'
      },
      {
        id: '6',
        name: '–ú–æ—Ä—Å –∫–ª—é–∫–≤–µ–Ω–Ω—ã–π',
        price: 250,
        description: '–û—Å–≤–µ–∂–∞—é—â–∏–π –º–æ—Ä—Å',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=ü•§'
      }
    ]
  },
  {
    id: '3',
    title: '–ó–∞–∫—É—Å–∫–∏',
    data: [
      {
        id: '7',
        name: '–ß–∏–ø—Å—ã',
        price: 200,
        description: '–•—Ä—É—Å—Ç—è—â–∏–µ —á–∏–ø—Å—ã',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=ü•î'
      },
      {
        id: '8',
        name: '–û—Ä–µ—à–∫–∏',
        price: 180,
        description: '–ê—Å—Å–æ—Ä—Ç–∏ –æ—Ä–µ—Ö–æ–≤',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=ü•ú'
      }
    ]
  },
  {
    id: '4',
    title: '–î–µ—Å–µ—Ä—Ç—ã',
    data: [
      {
        id: '9',
        name: '–¢–∏—Ä–∞–º–∏—Å—É',
        price: 400,
        description: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=üç∞'
      },
      {
        id: '10',
        name: '–ß–∏–∑–∫–µ–π–∫',
        price: 350,
        description: '–ù–µ–∂–Ω—ã–π —á–∏–∑–∫–µ–π–∫',
        image: 'https://via.placeholder.com/80x80/2E7D32/FFFFFF?text=üéÇ'
      }
    ]
  }
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ –º–µ–Ω—é —Å —Ç–æ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
function MenuScreen() {
  const [selectedCategory, setSelectedCategory] = useState('1');
  const [isScrolling, setIsScrolling] = useState(false);
  const [headerHeight, setHeaderHeight] = useState(0);
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const categoriesRef = useRef<FlatList>(null);
  const scrollViewRef = useRef<ScrollView>(null);
  const categoryRefs = useRef<{[key: string]: View}>({});

  // –ò–∑–º–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const measureHeader = useCallback((event: any) => {
    const { height } = event.nativeEvent.layout;
    setHeaderHeight(height);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const scrollToCategory = useCallback((categoryId: string) => {
    if (isScrolling) return;

    LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
    setSelectedCategory(categoryId);
    setIsScrolling(true);

    const categoryHeader = categoryRefs.current[categoryId];

    if (scrollViewRef.current && categoryHeader) {
      categoryHeader.measure((_x: number, _y: number, _width: number, _height: number, _pageX: number, pageY: number) => {
        const scrollPosition = Math.max(0, pageY - headerHeight - 10);

        scrollViewRef.current?.scrollTo({
          y: scrollPosition,
          animated: true
        });

        setTimeout(() => {
          setIsScrolling(false);
        }, 500);
      });
    }

    const categoryDataIndex = MENU_DATA.findIndex(section => section.id === categoryId);
    if (categoriesRef.current && categoryDataIndex !== -1) {
      categoriesRef.current.scrollToIndex({
        index: categoryDataIndex,
        animated: true,
        viewPosition: 0.5
      });
    }

    if (scrollTimeoutRef.current) {
      clearTimeout(scrollTimeoutRef.current);
    }
  }, [isScrolling, headerHeight]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleScroll = useCallback((event: NativeSyntheticEvent<NativeScrollEvent>) => {
    const { contentOffset } = event.nativeEvent;
    const scrollY = contentOffset.y;

    if (isScrolling) return;

    let closestCategory = selectedCategory;
    let minDistance = Infinity;

    MENU_DATA.forEach(category => {
      const categoryHeader = categoryRefs.current[category.id];
      if (categoryHeader) {
        categoryHeader.measure((_x: number, _y: number, _width: number, _height: number, _pageX: number, pageY: number) => {
          const categoryTop = pageY - headerHeight;
          const distance = Math.abs(scrollY - categoryTop);

          if (distance < minDistance) {
            minDistance = distance;
            closestCategory = category.id;
          }

          if (category.id === MENU_DATA[MENU_DATA.length - 1].id && closestCategory !== selectedCategory) {
            setSelectedCategory(closestCategory);

            const categoryDataIndex = MENU_DATA.findIndex(section => section.id === closestCategory);
            if (categoriesRef.current && categoryDataIndex !== -1) {
              categoriesRef.current.scrollToIndex({
                index: categoryDataIndex,
                animated: true,
                viewPosition: 0.5
              });
            }
          }
        });
      }
    });

    if (scrollTimeoutRef.current) {
      clearTimeout(scrollTimeoutRef.current);
    }

    const newTimeout = setTimeout(() => {
      setIsScrolling(false);
    }, 100);

    scrollTimeoutRef.current = newTimeout;
  }, [selectedCategory, isScrolling, headerHeight]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–∫—Ä–æ–ª–ª–∞
  const handleScrollBeginDrag = useCallback(() => {
    setIsScrolling(true);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞
  const handleScrollEndDrag = useCallback(() => {
    const timeout = setTimeout(() => {
      setIsScrolling(false);
    }, 100);
    scrollTimeoutRef.current = timeout;
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ref –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const setCategoryRef = useCallback((categoryId: string) => (ref: View) => {
    categoryRefs.current[categoryId] = ref;
  }, []);

  return (
    <View style={menuStyles.container}>
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <View
        style={menuStyles.headerContainer}
        onLayout={measureHeader}
      >
        <Text style={menuStyles.title}>üçΩÔ∏è –ú–µ–Ω—é Botanica</Text>

        {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ–≤–∞–ª—å—á–∏–∫–∞—Ö */}
        <View style={menuStyles.categoriesContainer}>
          <FlatList
            ref={categoriesRef}
            data={MENU_DATA}
            horizontal
            showsHorizontalScrollIndicator={false}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={[
                  menuStyles.categoryButton,
                  selectedCategory === item.id && menuStyles.categoryButtonActive
                ]}
                onPress={() => scrollToCategory(item.id)}
                activeOpacity={0.7}
              >
                <Text style={[
                  menuStyles.categoryText,
                  selectedCategory === item.id && menuStyles.categoryTextActive
                ]}>
                  {item.title}
                </Text>
              </TouchableOpacity>
            )}
            contentContainerStyle={menuStyles.categoriesList}
          />
        </View>
      </View>

      {/* ScrollView —Å —Ç–æ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
      <ScrollView
        ref={scrollViewRef}
        style={menuStyles.menuContainer}
        showsVerticalScrollIndicator={false}
        onScroll={handleScroll}
        onScrollBeginDrag={handleScrollBeginDrag}
        onScrollEndDrag={handleScrollEndDrag}
        scrollEventThrottle={16}
        contentContainerStyle={menuStyles.scrollContent}
      >
        {MENU_DATA.map(category => (
          <View key={category.id}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ref –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
            <View
              style={menuStyles.sectionHeader}
              ref={setCategoryRef(category.id)}
            >
              <Text style={menuStyles.sectionTitle}>{category.title}</Text>
            </View>

            {/* –ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            {category.data.map(item => (
              <View key={item.id} style={menuStyles.menuItem}>
                <Image
                  source={{ uri: item.image }}
                  style={menuStyles.itemImage}
                  resizeMode="cover"
                />

                <View style={menuStyles.itemContent}>
                  <View style={menuStyles.itemHeader}>
                    <Text style={menuStyles.itemName}>{item.name}</Text>
                    <Text style={menuStyles.itemPrice}>{item.price} ‚ÇΩ</Text>
                  </View>
                  <Text style={menuStyles.itemDescription}>{item.description}</Text>
                </View>
              </View>
            ))}
          </View>
        ))}

        {/* –û—Ç—Å—Ç—É–ø –≤–Ω–∏–∑—É */}
        <View style={menuStyles.bottomSpace} />
      </ScrollView>
    </View>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ –∫–∞—Ä—Ç—ã —Å—Ç–æ–ª–æ–≤
function HallMapScreen() {
  const [selectedTable, setSelectedTable] = useState<string | null>(null);
  const [transform, setTransform] = useState({
    scale: 1,
    translateX: 0,
    translateY: 0,
  });

  // –†–µ—Ñ—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–µ—Å—Ç–æ–≤
  const transformRef = useRef(transform);
  const panStartRef = useRef({
    translateX: 0,
    translateY: 0,
    scale: 1,
  });
  const zoomStartRef = useRef({
    distance: 0,
    scale: 1,
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º transformRef –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ transform
  useEffect(() => {
    transformRef.current = transform;
  }, [transform]);

  // –°–æ–∑–¥–∞–µ–º PanResponder –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–µ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è Android
  const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => true,
      onMoveShouldSetPanResponder: (evt, gestureState) => {
        // –î–ª—è Android: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–º–µ—Ç–Ω–æ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        const { dx, dy } = gestureState;
        return Math.abs(dx) > 5 || Math.abs(dy) > 5;
      },

      onPanResponderGrant: (evt, gs) => {
        const touches = evt.nativeEvent.touches;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∂–µ—Å—Ç–∞
        panStartRef.current = {
          translateX: transformRef.current.translateX,
          translateY: transformRef.current.translateY,
          scale: transformRef.current.scale,
        };

        // –ï—Å–ª–∏ –¥–≤–∞ –ø–∞–ª—å—Ü–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        if (touches.length === 2) {
          const touch1 = touches[0];
          const touch2 = touches[1];
          const distance = Math.sqrt(
            Math.pow(touch2.pageX - touch1.pageX, 2) +
            Math.pow(touch2.pageY - touch1.pageY, 2)
          );

          zoomStartRef.current = {
            distance: distance,
            scale: transformRef.current.scale,
          };
        }
      },

      onPanResponderMove: (evt, gs) => {
        const touches = evt.nativeEvent.touches;

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º –ø–∞–ª—å—Ü–µ–º
        if (touches.length === 1) {
          const sensitivity = Platform.OS === 'android' ? 1.2 : 0.8;
          const newTranslateX = panStartRef.current.translateX + (gs.dx / panStartRef.current.scale) * sensitivity;
          const newTranslateY = panStartRef.current.translateY + (gs.dy / panStartRef.current.scale) * sensitivity;

          setTransform(prev => ({
            ...prev,
            translateX: newTranslateX,
            translateY: newTranslateY
          }));
        }
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É–º—è –ø–∞–ª—å—Ü–∞–º–∏
        else if (touches.length === 2) {
          const touch1 = touches[0];
          const touch2 = touches[1];
          const currentDistance = Math.sqrt(
            Math.pow(touch2.pageX - touch1.pageX, 2) +
            Math.pow(touch2.pageY - touch1.pageY, 2)
          );

          // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
          if (zoomStartRef.current.distance > 0) {
            const scaleChange = currentDistance / zoomStartRef.current.distance;
            const newScale = Math.max(0.3, Math.min(3, zoomStartRef.current.scale * scaleChange));

            setTransform(prev => ({
              ...prev,
              scale: newScale
            }));
          }
        }
      },

      onPanResponderRelease: () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        zoomStartRef.current.distance = 0;
      },

      // –î–ª—è Android: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤
      onPanResponderTerminationRequest: () => false,
    })
  ).current;

  // –î–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ (20 —Å—Ç–æ–ª–æ–≤)
  const tables: Table[] = [
    { id: '1', number: 1, isAvailable: true, position: { x: 50, y: 50 } },
    { id: '2', number: 2, isAvailable: true, position: { x: 150, y: 50 } },
    { id: '3', number: 3, isAvailable: false, position: { x: 250, y: 50 } },
    { id: '4', number: 4, isAvailable: true, position: { x: 350, y: 50 } },
    { id: '5', number: 5, isAvailable: true, position: { x: 450, y: 50 } },
    { id: '6', number: 6, isAvailable: true, position: { x: 50, y: 150 } },
    { id: '7', number: 7, isAvailable: false, position: { x: 150, y: 150 } },
    { id: '8', number: 8, isAvailable: true, position: { x: 250, y: 150 } },
    { id: '9', number: 9, isAvailable: true, position: { x: 350, y: 150 } },
    { id: '10', number: 10, isAvailable: true, position: { x: 450, y: 150 } },
    { id: '11', number: 11, isAvailable: true, position: { x: 50, y: 250 } },
    { id: '12', number: 12, isAvailable: false, position: { x: 150, y: 250 } },
    { id: '13', number: 13, isAvailable: true, position: { x: 250, y: 250 } },
    { id: '14', number: 14, isAvailable: true, position: { x: 350, y: 250 } },
    { id: '15', number: 15, isAvailable: true, position: { x: 450, y: 250 } },
    { id: '16', number: 16, isAvailable: true, position: { x: 50, y: 350 } },
    { id: '17', number: 17, isAvailable: false, position: { x: 150, y: 350 } },
    { id: '18', number: 18, isAvailable: true, position: { x: 250, y: 350 } },
    { id: '19', number: 19, isAvailable: true, position: { x: 350, y: 350 } },
    { id: '20', number: 20, isAvailable: true, position: { x: 450, y: 350 } },
  ];

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –¥–ª—è Android
  const handleTableSelect = (table: Table) => {
    if (!table.isAvailable) {
      Alert.alert('–°—Ç–æ–ª –∑–∞–Ω—è—Ç', `–°—Ç–æ–ª ‚Ññ${table.number} –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç`);
      return;
    }

    // –î–ª—è Android: –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (Platform.OS === 'android') {
      setTimeout(() => {
        setSelectedTable(table.id);
        Alert.alert(
          '–°—Ç–æ–ª –≤—ã–±—Ä–∞–Ω',
          `–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª ‚Ññ${table.number}`
        );
      }, 50);
    } else {
      setSelectedTable(table.id);
      Alert.alert(
        '–°—Ç–æ–ª –≤—ã–±—Ä–∞–Ω',
        `–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª ‚Ññ${table.number}`
      );
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
  const handleZoomIn = () => {
    setTransform(prev => ({
      ...prev,
      scale: Math.min(prev.scale + 0.2, 3)
    }));
  };

  const handleZoomOut = () => {
    setTransform(prev => ({
      ...prev,
      scale: Math.max(prev.scale - 0.2, 0.3)
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã
  const handleResetMap = () => {
    setTransform({
      scale: 1,
      translateX: 0,
      translateY: 0,
    });
  };

  // –†–µ–Ω–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –Ω–∞ –∫–∞—Ä—Ç–µ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è Android
  const renderTable = (table: Table) => (
    <TouchableOpacity
      key={table.id}
      style={[
        hallMapStyles.table,
        !table.isAvailable && hallMapStyles.tableOccupied,
        selectedTable === table.id && hallMapStyles.tableSelected,
        Platform.OS === 'android' && hallMapStyles.tableAndroid, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Android
        {
          left: table.position.x,
          top: table.position.y,
        }
      ]}
      onPress={() => handleTableSelect(table)}
      disabled={!table.isAvailable}
      // –î–ª—è Android: —É–ª—É—á—à–∞–µ–º –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∫–∞—Å–∞–Ω–∏–µ
      activeOpacity={0.7}
      delayPressIn={0}
    >
      <Text style={[
        hallMapStyles.tableNumber,
        Platform.OS === 'android' && hallMapStyles.tableNumberAndroid
      ]}>
        {table.number}
      </Text>
    </TouchableOpacity>
  );

  return (
    <View style={hallMapStyles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <View style={hallMapStyles.header}>
        <Text style={hallMapStyles.headerTitle}>üó∫Ô∏è –°—Ö–µ–º–∞ –∑–∞–ª–∞</Text>
      </View>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <View style={hallMapStyles.content}>
        <Text style={hallMapStyles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª</Text>

        {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <View style={hallMapStyles.controls}>
          <View style={hallMapStyles.zoomControls}>
            <TouchableOpacity
              style={hallMapStyles.zoomButton}
              onPress={handleZoomIn}
              activeOpacity={0.7}
            >
              <Text style={hallMapStyles.zoomButtonText}>+</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={hallMapStyles.zoomButton}
              onPress={handleZoomOut}
              activeOpacity={0.7}
            >
              <Text style={hallMapStyles.zoomButtonText}>-</Text>
            </TouchableOpacity>
          </View>

          <TouchableOpacity
            style={hallMapStyles.resetButton}
            onPress={handleResetMap}
            activeOpacity={0.7}
          >
            <Text style={hallMapStyles.resetButtonText}>‚ü≤ –°–±—Ä–æ—Å</Text>
          </TouchableOpacity>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—à—Ç–∞–±–µ */}
        <View style={hallMapStyles.scaleInfo}>
          <Text style={hallMapStyles.scaleText}>–ú–∞—Å—à—Ç–∞–±: {Math.round(transform.scale * 100)}%</Text>
          <Text style={hallMapStyles.helpText}>‚Ä¢ –û–¥–∏–Ω –ø–∞–ª–µ—Ü –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</Text>
          <Text style={hallMapStyles.helpText}>‚Ä¢ –î–≤–∞ –ø–∞–ª—å—Ü–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è</Text>
        </View>

        {/* –ë–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–∞ –∑–∞–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <View
          style={[
            hallMapStyles.mapContainer,
            Platform.OS === 'android' && hallMapStyles.mapContainerAndroid
          ]}
          {...panResponder.panHandlers}
        >
          <View
            style={[
              hallMapStyles.simpleMap,
              {
                transform: [
                  { translateX: transform.translateX },
                  { translateY: transform.translateY },
                  { scale: transform.scale }
                ]
              }
            ]}
          >
            {/* –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–æ–ª–æ–≤ */}
            {tables.map(renderTable)}
          </View>
        </View>

        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        <View style={hallMapStyles.legend}>
          <View style={hallMapStyles.legendItem}>
            <View style={[hallMapStyles.legendColor, hallMapStyles.available]} />
            <Text style={hallMapStyles.legendText}>–°–≤–æ–±–æ–¥–µ–Ω</Text>
          </View>
          <View style={hallMapStyles.legendItem}>
            <View style={[hallMapStyles.legendColor, hallMapStyles.occupied]} />
            <Text style={hallMapStyles.legendText}>–ó–∞–Ω—è—Ç</Text>
          </View>
          <View style={hallMapStyles.legendItem}>
            <View style={[hallMapStyles.legendColor, hallMapStyles.selected]} />
            <Text style={hallMapStyles.legendText}>–í—ã–±—Ä–∞–Ω</Text>
          </View>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–µ */}
        {selectedTable && (
          <View style={hallMapStyles.selectedTableInfo}>
            <Text style={hallMapStyles.selectedTableText}>
              –í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª: ‚Ññ{tables.find(t => t.id === selectedTable)?.number}
            </Text>
            <TouchableOpacity
              style={hallMapStyles.clearSelectionButton}
              onPress={() => setSelectedTable(null)}
              activeOpacity={0.7}
            >
              <Text style={hallMapStyles.clearSelectionText}>‚úï</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    </View>
  );
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã (–ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏)
function ProfileScreen() {
  return (
    <View style={commonStyles.simpleContainer}>
      <Text style={commonStyles.simpleTitle}>üë§ –ü—Ä–æ—Ñ–∏–ª—å</Text>
      <Text>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</Text>
    </View>
  );
}

function AboutScreen() {
  return (
    <View style={commonStyles.simpleContainer}>
      <Text style={commonStyles.simpleTitle}>‚ÑπÔ∏è –û –Ω–∞—Å</Text>
      <Text>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ñ–µ Botanica</Text>
    </View>
  );
}

const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator
        initialRouteName="Menu"
        screenOptions={{
          headerStyle: {
            backgroundColor: '#2E7D32',
          },
          headerTintColor: '#fff',
          headerTitleStyle: {
            fontWeight: 'bold',
          },
          tabBarActiveTintColor: '#2E7D32',
          tabBarStyle: {
            paddingVertical: 5,
          },
        }}
      >
        <Tab.Screen
          name="Menu"
          component={MenuScreen}
          options={{
            title: '–ú–µ–Ω—é',
            tabBarLabel: '–ú–µ–Ω—é',
            tabBarIcon: ({ color, size }) => (
              <Text style={{ fontSize: 20 }}>üçΩÔ∏è</Text>
            ),
          }}
        />
        <Tab.Screen
          name="HallMap"
          component={HallMapScreen}
          options={{
            title: '–°—Ö–µ–º–∞ –∑–∞–ª–∞',
            tabBarLabel: '–°—Ö–µ–º–∞ –∑–∞–ª–∞',
            tabBarIcon: ({ color, size }) => (
              <Text style={{ fontSize: 20 }}>üó∫Ô∏è</Text>
            ),
          }}
        />
        <Tab.Screen
          name="Profile"
          component={ProfileScreen}
          options={{
            title: '–ü—Ä–æ—Ñ–∏–ª—å',
            tabBarLabel: '–ü—Ä–æ—Ñ–∏–ª—å',
            tabBarIcon: ({ color, size }) => (
              <Text style={{ fontSize: 20 }}>üë§</Text>
            ),
          }}
        />
        <Tab.Screen
          name="About"
          component={AboutScreen}
          options={{
            title: '–û –Ω–∞—Å',
            tabBarLabel: '–û –Ω–∞—Å',
            tabBarIcon: ({ color, size }) => (
              <Text style={{ fontSize: 20 }}>‚ÑπÔ∏è</Text>
            ),
          }}
        />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

// –°—Ç–∏–ª–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –º–µ–Ω—é
const menuStyles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  headerContainer: {
    backgroundColor: '#fff',
    zIndex: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 5,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginBottom: 10,
    textAlign: 'center',
    marginTop: 10,
  },
  categoriesContainer: {
    marginBottom: 10,
    paddingHorizontal: 10,
    paddingBottom: 10,
    height: 60,
  },
  categoriesList: {
    paddingHorizontal: 5,
  },
  categoryButton: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    backgroundColor: '#f5f5f5',
    borderRadius: 25,
    marginRight: 10,
    justifyContent: 'center',
    marginVertical: 5,
    minWidth: 100,
  },
  categoryButtonActive: {
    backgroundColor: '#2E7D32',
  },
  categoryText: {
    fontSize: 14,
    color: '#666',
    fontWeight: '500',
    textAlign: 'center',
  },
  categoryTextActive: {
    color: '#fff',
    fontWeight: 'bold',
  },
  menuContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 16,
  },
  sectionHeader: {
    backgroundColor: '#f8f8f8',
    paddingVertical: 12,
    paddingHorizontal: 16,
    marginTop: 10,
    marginBottom: 8,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#2E7D32',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2E7D32',
  },
  menuItem: {
    backgroundColor: '#f9f9f9',
    padding: 12,
    borderRadius: 8,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  itemImage: {
    width: 80,
    height: 80,
    borderRadius: 8,
    marginRight: 12,
  },
  itemContent: {
    flex: 1,
  },
  itemHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  itemName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    flex: 1,
  },
  itemPrice: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginLeft: 10,
  },
  itemDescription: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
  bottomSpace: {
    height: 20,
  },
});

// –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã —Å—Ç–æ–ª–æ–≤
const hallMapStyles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#2E7D32',
    borderBottomWidth: 1,
    borderBottomColor: '#1B5E20',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#2E7D32',
    textAlign: 'center',
  },
  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  controls: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
    paddingHorizontal: 10,
  },
  // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º
  zoomControls: {
    flexDirection: 'row',
  },
  zoomButton: {
    width: 50,
    height: 50,
    backgroundColor: '#2E7D32',
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 3,
    elevation: 5,
  },
  zoomButtonText: {
    fontSize: 24,
    color: 'white',
    fontWeight: 'bold',
  },
  // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
  resetButton: {
    paddingHorizontal: 15,
    paddingVertical: 10,
    backgroundColor: '#757575',
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 3,
    elevation: 5,
  },
  resetButtonText: {
    fontSize: 14,
    color: 'white',
    fontWeight: 'bold',
  },
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—à—Ç–∞–±–µ
  scaleInfo: {
    alignItems: 'center',
    marginBottom: 15,
    padding: 10,
    backgroundColor: 'white',
    borderRadius: 8,
  },
  scaleText: {
    fontSize: 16,
    color: '#2E7D32',
    fontWeight: 'bold',
    marginBottom: 5,
  },
  helpText: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
  },
  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  mapContainer: {
    flex: 1,
    backgroundColor: '#E8F5E8',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#C8E6C9',
    overflow: 'hidden',
    marginBottom: 20,
    minHeight: 400,
  },
  // –ë–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–∞
  simpleMap: {
    width: 600,
    height: 500,
    position: 'relative',
  },
  table: {
    position: 'absolute',
    width: 50,
    height: 50,
    backgroundColor: '#4CAF50',
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  tableOccupied: {
    backgroundColor: '#F44336',
  },
  tableSelected: {
    backgroundColor: '#2196F3',
    borderWidth: 3,
    borderColor: '#1976D2',
    transform: [{ scale: 1.1 }],
  },
  tableNumber: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'white',
  },
  legend: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 20,
    padding: 10,
    backgroundColor: 'white',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 3,
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  legendColor: {
    width: 16,
    height: 16,
    borderRadius: 8,
    marginRight: 8,
  },
  available: {
    backgroundColor: '#4CAF50',
  },
  occupied: {
    backgroundColor: '#F44336',
  },
  selected: {
    backgroundColor: '#2196F3',
  },
  legendText: {
    fontSize: 12,
    color: '#333',
  },
  selectedTableInfo: {
    backgroundColor: '#3498db',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  selectedTableText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
    marginRight: 10,
  },
  clearSelectionButton: {
    width: 24,
    height: 24,
    backgroundColor: 'rgba(255,255,255,0.3)',
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  clearSelectionText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 12,
  },
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Android
  mapContainerAndroid: {
    // –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∂–µ—Å—Ç–æ–≤ –Ω–∞ Android
    borderWidth: 1,
    borderColor: '#BDBDBD',
  },
  tableAndroid: {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–∞—Å–∞–Ω–∏—è –¥–ª—è Android
    minWidth: 55,
    minHeight: 55,
  },
  tableNumberAndroid: {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ Android
    fontSize: 18,
  },
});

// –û–±—â–∏–µ —Å—Ç–∏–ª–∏
const commonStyles = StyleSheet.create({
  simpleContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 20,
  },
  simpleTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#2E7D32',
  },
});